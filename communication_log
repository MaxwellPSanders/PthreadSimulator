4-11 just added the mfs.c file to use as a bench so I don't have to retype all includes, etc. -David

4-24 gutted mfs.c, implemented an argument getter and checker, next is to put make resource arrays -Maxwell

4-24 Changed function naming to camelCase style instead of underscore. I know that I didn't fo this in my msh.c
     file but I can already tell that with us both working on this it will get confusing. For the remainder 
     of the assignment I recommend this format:
         - all variables follow the underscore naming convention
             Examples:

                 int this_is_an_example_int;

                 float pthread_assignment_expected_grade;

         - all functions follow the camelCase naming convention
             Examples:

                 void awesomePthreadSpawningFunction(void){
                     ...
                 }

                 float functionThatReturnsOurGradeOnThisAssignment(void){
                     pthread_assignment_expected_grade = 100.00;
                     return pthread_assignment_expected_grade;
                 }

     This will make it easier to tell when something is a variable or a function with a return value.
     If you want to add other conventions like all variables that are pointers are named ptrXXXX or
     all global varaibles are XXXX_GBL then that works too - just add a note in here. This is the 
     type of stuff that they dont care about in school but definitely care about when you are working 
     in industry on a large project like an F-35 Simulator with 10 other coders. -David

4-25 You will need to compile the code with the following now that I have added threading functions:
     "g++ ksf.c -o ksf -lpthread". I have created the code up to the spawning of threads.

5-02 Lots of stuff done.
     Accomplished:
     Creation of pthreads is done, as well as the numbering of them
     Scrapped half the semaphores, only need one (if a kerbal can grab one, he should be able to grab all
	or none, otherwise deadlock will assuredly occur)
     My vision/what needs to be done:
     The kerbal needs to check the 0 arrays, 0 indicates that there is a free resource, they will take the index
	of that first available 0, change it to a 1. If they were able to get an index for every resource, let go
  	of the semaphores and start assembling. 
     The problem in my mind is where they have to indicate that they didn't get all of the resources, they need to print
     it out, but then never print it out again until they do get more resources. 
     I don't really know what else to say, if you have questions please don't hesitate to ask, I know this is probably unclear.
	-Maxwell

5-03 Have you ever had a problem with a program that just makes you feel like a piece of trash???? 
     Literally what I have just experienced, I just spent the last hour trying to figure out why the
     semaphores aren't working, I was getting really panicky
     .
     .
     .
     .
     .
     .
     .
     .
     Turns out OS X doesn't work with semaphores, compiled and ran the program on Omega
     This thing is 1 more hour from being done.
     What's left:
     Notifying that you tried to get parts but couldn't
     Notifying that you tried to get on the launch pad but couldn't
     This has been fun
	-Maxwell
